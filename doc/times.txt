250G ndarray in utop (i.e. bytecode)
(Larger ones don't seem to be writeable on my disk. not sure why.)

# let x = Owl.Arr.uniform [|1000;1000;250|];;
val x : Owl.Arr.arr =

                   C0        C1        C2        C3       C4          C245      C246      C247      C248     C249
    R[0,0]   0.295183  0.426279  0.491713  0.655154   0.3129 ...  0.583117   0.47297  0.237994  0.542538 0.657346
    R[0,1]   0.816595  0.312579  0.658112  0.203546 0.599519 ...  0.425435  0.624381  0.273046  0.430727 0.446034
    R[0,2]   0.581696  0.589723 0.0389877  0.832317 0.295206 ...  0.661015 0.0298055 0.0752995 0.0353451 0.451572
    R[0,3]   0.559524  0.567583  0.813806  0.646887 0.361534 ... 0.0621517  0.949059  0.773613  0.475388 0.165042
    R[0,4]   0.712203  0.302443  0.134488  0.958436 0.240789 ...  0.782997  0.384947  0.392062  0.312066 0.114298
                  ...       ...       ...       ...      ... ...       ...       ...       ...       ...      ...
R[999,995]   0.883879     0.278  0.678032  0.388643 0.359567 ... 0.0650172  0.270102 0.0706818  0.515467 0.330581
R[999,996] 0.00466051  0.739033  0.820779   0.32837 0.128811 ...    0.4624 0.0904627 0.0843729  0.516015 0.742819
R[999,997]   0.505077  0.458958  0.146725 0.0792541  0.31054 ...  0.672728  0.796313  0.255077 0.0295181 0.576492
R[999,998]     0.3609 0.0545353   0.21025  0.271706 0.423979 ...  0.730719 0.0586366   0.80998  0.803799 0.907947
R[999,999]   0.500297  0.880112  0.968719  0.626724 0.516763 ...  0.306206  0.887084  0.271599 0.0544173 0.611765

# let buf = Owl_bin_prot.(time (fun () -> serialize x));;
cpu: 3.611964s, wall: 5.759773s
val buf : Bin_prot.Common.buf = <abstr>
# let buf = Owl_bin_prot.(time (fun () -> serialize x));;
cpu: 1.531965s, wall: 2.248246s
val buf : Bin_prot.Common.buf = <abstr>
# let buf = Owl_bin_prot.(time (fun () -> serialize x));;
cpu: 1.604111s, wall: 2.880861s
val buf : Bin_prot.Common.buf = <abstr>
# let buf = Owl_bin_prot.(time (fun () -> serialize x));;
cpu: 1.191825s, wall: 1.192636s
val buf : Bin_prot.Common.buf = <abstr>
# let buf = Owl_bin_prot.(time (fun () -> serialize x));;
cpu: 1.209081s, wall: 1.209767s
val buf : Bin_prot.Common.buf = <abstr>
# Owl_bin_prot.(time (fun () -> save_serialized buf "x.bin"));;
cpu: 0.888008s, wall: 2.394775s
- : unit = ()
# Owl_bin_prot.(time (fun () -> save_serialized buf "x.bin"));;
cpu: 1.068629s, wall: 3.162864s
- : unit = ()
# Owl_bin_prot.(time (fun () -> save_serialized buf "x.bin"));;
cpu: 0.985697s, wall: 3.168166s
- : unit = ()
# let buf' = Owl_bin_prot.(time (fun () -> load_serialized "x.bin"));;
cpu: 2.212278s, wall: 8.283358s
val buf' : Bin_prot.Common.buf = <abstr>
# let buf' = Owl_bin_prot.(time (fun () -> load_serialized "x.bin"));;
cpu: 1.795815s, wall: 3.709592s
val buf' : Bin_prot.Common.buf = <abstr>
# let buf' = Owl_bin_prot.(time (fun () -> load_serialized "x.bin"));;
cpu: 1.644512s, wall: 3.660189s
val buf' : Bin_prot.Common.buf = <abstr>
# let buf' = Owl_bin_prot.(time (fun () -> load_serialized "x.bin"));;
cpu: 1.657778s, wall: 3.081104s
val buf' : Bin_prot.Common.buf = <abstr>
# let x' = Owl_bin_prot.(time (fun () -> unserialize buf'));;
cpu: 2.910336s, wall: 2.943593s
val x' : (float, CamlinternalBigarray.float64_elt, CamlinternalBigarray.c_layout) CamlinternalBigarray.genarray =

                   C0        C1        C2        C3       C4          C245      C246      C247      C248     C249
    R[0,0]   0.295183  0.426279  0.491713  0.655154   0.3129 ...  0.583117   0.47297  0.237994  0.542538 0.657346
    R[0,1]   0.816595  0.312579  0.658112  0.203546 0.599519 ...  0.425435  0.624381  0.273046  0.430727 0.446034
    R[0,2]   0.581696  0.589723 0.0389877  0.832317 0.295206 ...  0.661015 0.0298055 0.0752995 0.0353451 0.451572
    R[0,3]   0.559524  0.567583  0.813806  0.646887 0.361534 ... 0.0621517  0.949059  0.773613  0.475388 0.165042
    R[0,4]   0.712203  0.302443  0.134488  0.958436 0.240789 ...  0.782997  0.384947  0.392062  0.312066 0.114298
                  ...       ...       ...       ...      ... ...       ...       ...       ...       ...      ...
R[999,995]   0.883879     0.278  0.678032  0.388643 0.359567 ... 0.0650172  0.270102 0.0706818  0.515467 0.330581
R[999,996] 0.00466051  0.739033  0.820779   0.32837 0.128811 ...    0.4624 0.0904627 0.0843729  0.516015 0.742819
R[999,997]   0.505077  0.458958  0.146725 0.0792541  0.31054 ...  0.672728  0.796313  0.255077 0.0295181 0.576492
R[999,998]     0.3609 0.0545353   0.21025  0.271706 0.423979 ...  0.730719 0.0586366   0.80998  0.803799 0.907947
R[999,999]   0.500297  0.880112  0.968719  0.626724 0.516763 ...  0.306206  0.887084  0.271599 0.0544173 0.611765

# let x' = Owl_bin_prot.(time (fun () -> unserialize buf'));;
cpu: 1.122315s, wall: 1.123788s
val x' : (float, CamlinternalBigarray.float64_elt, CamlinternalBigarray.c_layout) CamlinternalBigarray.genarray =

                   C0        C1        C2        C3       C4          C245      C246      C247      C248     C249
    R[0,0]   0.295183  0.426279  0.491713  0.655154   0.3129 ...  0.583117   0.47297  0.237994  0.542538 0.657346
    R[0,1]   0.816595  0.312579  0.658112  0.203546 0.599519 ...  0.425435  0.624381  0.273046  0.430727 0.446034
    R[0,2]   0.581696  0.589723 0.0389877  0.832317 0.295206 ...  0.661015 0.0298055 0.0752995 0.0353451 0.451572
    R[0,3]   0.559524  0.567583  0.813806  0.646887 0.361534 ... 0.0621517  0.949059  0.773613  0.475388 0.165042
    R[0,4]   0.712203  0.302443  0.134488  0.958436 0.240789 ...  0.782997  0.384947  0.392062  0.312066 0.114298
                  ...       ...       ...       ...      ... ...       ...       ...       ...       ...      ...
R[999,995]   0.883879     0.278  0.678032  0.388643 0.359567 ... 0.0650172  0.270102 0.0706818  0.515467 0.330581
R[999,996] 0.00466051  0.739033  0.820779   0.32837 0.128811 ...    0.4624 0.0904627 0.0843729  0.516015 0.742819
R[999,997]   0.505077  0.458958  0.146725 0.0792541  0.31054 ...  0.672728  0.796313  0.255077 0.0295181 0.576492
R[999,998]     0.3609 0.0545353   0.21025  0.271706 0.423979 ...  0.730719 0.0586366   0.80998  0.803799 0.907947
R[999,999]   0.500297  0.880112  0.968719  0.626724 0.516763 ...  0.306206  0.887084  0.271599 0.0544173 0.611765

# let x' = Owl_bin_prot.(time (fun () -> unserialize buf'));;
cpu: 1.130685s, wall: 1.131794s
val x' : (float, CamlinternalBigarray.float64_elt, CamlinternalBigarray.c_layout) CamlinternalBigarray.genarray =

                   C0        C1        C2        C3       C4          C245      C246      C247      C248     C249
    R[0,0]   0.295183  0.426279  0.491713  0.655154   0.3129 ...  0.583117   0.47297  0.237994  0.542538 0.657346
    R[0,1]   0.816595  0.312579  0.658112  0.203546 0.599519 ...  0.425435  0.624381  0.273046  0.430727 0.446034
    R[0,2]   0.581696  0.589723 0.0389877  0.832317 0.295206 ...  0.661015 0.0298055 0.0752995 0.0353451 0.451572
    R[0,3]   0.559524  0.567583  0.813806  0.646887 0.361534 ... 0.0621517  0.949059  0.773613  0.475388 0.165042
    R[0,4]   0.712203  0.302443  0.134488  0.958436 0.240789 ...  0.782997  0.384947  0.392062  0.312066 0.114298
                  ...       ...       ...       ...      ... ...       ...       ...       ...       ...      ...
R[999,995]   0.883879     0.278  0.678032  0.388643 0.359567 ... 0.0650172  0.270102 0.0706818  0.515467 0.330581
R[999,996] 0.00466051  0.739033  0.820779   0.32837 0.128811 ...    0.4624 0.0904627 0.0843729  0.516015 0.742819
R[999,997]   0.505077  0.458958  0.146725 0.0792541  0.31054 ...  0.672728  0.796313  0.255077 0.0295181 0.576492
R[999,998]     0.3609 0.0545353   0.21025  0.271706 0.423979 ...  0.730719 0.0586366   0.80998  0.803799 0.907947
R[999,999]   0.500297  0.880112  0.968719  0.626724 0.516763 ...  0.306206  0.887084  0.271599 0.0544173 0.611765

# x = x';;
- : bool = true
